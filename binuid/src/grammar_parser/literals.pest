KW_AS = { "as" }
KW_BREAK = { "break" }
KW_CONST = { "const" }
KW_CONTINUE = { "continue" }
KW_CRATE = { "crate" }
KW_ELSE = { "else" }
KW_ENUM = { "enum" }
KW_EXTERN = { "extern" }
KW_FALSE = { "false" }
KW_FN = { "fn" }
KW_FOR = { "for" }
KW_IF = { "if" }
KW_IMPL = _{ "impl" }
KW_IN = { "in" }
KW_LET = { "let" }
KW_LOOP = { "loop" }
KW_MATCH = { "match" }
KW_MOD = { "mod" }
KW_MOVE = { "move" }
KW_MUT = { "mut" }
KW_PUB = { "pub" }
KW_REF = { "ref" }
KW_RETURN = { "return" }
KW_SELFVALUE = { "self" }
KW_SELFTYPE = { "Self" }
KW_STATIC = { "static" }
KW_STRUCT = _{ "struct" }
KW_SUPER = { "super" }
KW_TRAIT = { "trait" }
KW_TRUE = { "true" }
KW_TYPE = { "type" }
KW_UNSAFE = { "unsafe" }
KW_USE = { "use" }
KW_WHERE = { "where" }
KW_WHILE = { "while" }
KW_ASYNC = { "async" }
KW_AWAIT = { "await" }
KW_DYN = { "dyn" }

Strict_KW = _{
    KW_AS
    | KW_BREAK
    | KW_CONST
    | KW_CONTINUE
    | KW_CRATE
    | KW_ELSE
    | KW_ENUM
    | KW_EXTERN
    | KW_FALSE
    | KW_FN
    | KW_FOR
    | KW_IF
    | KW_IMPL
    | KW_IN
    | KW_LET
    | KW_LOOP
    | KW_MATCH
    | KW_MOD
    | KW_MOVE
    | KW_MUT
    | KW_PUB
    | KW_REF
    | KW_RETURN
    | KW_SELFVALUE
    | KW_SELFTYPE
    | KW_STATIC
    | KW_STRUCT
    | KW_SUPER
    | KW_TRAIT
    | KW_TRUE
    | KW_TYPE
    | KW_UNSAFE
    | KW_USE
    | KW_WHERE
    | KW_WHILE
    | KW_ASYNC
    | KW_AWAIT
    | KW_DYN
}

KW_ABSTRACT = { "abstract" }
KW_BECOME = { "become" }
KW_BOX = { "box" }
KW_DO = { "do" }
KW_FINAL = { "final" }
KW_MACRO = { "macro" }
KW_OVERRIDE = { "override" }
KW_PRIV = { "priv" }
KW_TYPEOF = { "typeof" }
KW_UNSIZED = { "unsized" }
KW_VIRTUAL = { "virtual" }
KW_YIELD = { "yield" }
KW_TRY = { "try" }

Reserved_KW = _{
    KW_ABSTRACT
    | KW_BECOME
    | KW_BOX
    | KW_DO
    | KW_FINAL
    | KW_MACRO
    | KW_OVERRIDE
    | KW_PRIV
    | KW_TYPEOF
    | KW_UNSIZED
    | KW_VIRTUAL
    | KW_YIELD
    | KW_TRY
}

KW_MACRO_RULES = { "macro_rules" }
KW_UNION = { "union" }
KW_STATICLIFETIME = { "'static" }

Weak_KW = _{
    KW_MACRO_RULES
    | KW_UNION
    | KW_STATICLIFETIME
    | KW_DYN
}

KW = {
    Strict_KW
    | Reserved_KW
    | Weak_KW
}

/// Comments
LineComment = _{ "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }
BlockComment = _{ "/*" ~ ((!("*/") ~ ANY) | BlockComment)* ~ "*/" }
Comment = _{ LineComment | BlockComment  }

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

/// #### Identifier Literal #########
AlphaUp = _{ 'A'..'Z' }
Alpha = _{ 'a'..'z' | 'A'..'Z' }
Alphanumeric = _{ Alpha | '0'..'9' }
Identifier = @{ (Alpha | "_") ~ (Alphanumeric | "_")* }
IdentifierList = _{ Identifier ~ WHITESPACE? ~ ("," ~ WHITESPACE? ~ Identifier)* }

Plus = { "+" } // Addition, Trait Bounds, Macro Kleene Matcher
Minus = { "-" } // Subtraction, Negation
Star = { "*" } // Multiplication, Dereference, Raw Pointers, Macro Kleene Matcher, Use wildcards
Slash = { "/" } // Division
Percent = { "%" } // Remainder
Caret = { "^" } // Bitwise and Logical XOR
Not = { "!" } // Bitwise and Logical NOT, Macro Calls, Inner Attributes, Never Type, Negative impls
And = { "&" } // Bitwise and Logical AND, Borrow, References, Reference patterns
Or = { "|" } //	Bitwise and Logical OR, Closures, Patterns in match, if let, and while let
AndAnd = { "&&" } // Lazy AND, Borrow, References, Reference patterns
OrOr = { "||" } // Lazy OR, Closures
Shl = { "<<" } // Shift Left, Nested Generics
Shr = { ">>" } // Shift Right, Nested Generics
PlusEq = { "+=" } // Addition assignment
MinusEq = { "-=" } // Subtraction assignment
StarEq = { "*=" } // Multiplication assignment
SlashEq = { "/=" } // Division assignment
PercentEq = { "%=" } // Remainder assignment
CaretEq = { "^=" } // Bitwise XOR assignment
AndEq = { "&=" } // Bitwise And assignment
OrEq = { "|=" } // Bitwise Or assignment
ShlEq = { "<<=" } // Shift Left assignment
ShrEq = { ">>=" } // Shift Right assignment, Nested Generics
Eq = { "="} // Assignment, Attributes, Various type definitions
EqEq = { "==" } // Equal
Ne = { "!=" } // Not Equal
Gt = { ">" } // Greater than, Generics, Paths
Lt = { "<" } // Less than, Generics, Paths
Ge = { ">=" } // Greater than or equal to, Generics
Le = { "<=" } // Less than or equal to
At = { "@" } // Subpattern binding
Underscore = { "_" } // Wildcard patterns, Inferred types, Unnamed items in constants, extern crates, use declarations, and destructuring assignment
Dot = { "." } // Field access, Tuple index
DotDot = { ".." } // Range, Struct expressions, Patterns, Range Patterns
DotDotDot = { "..." } // Variadic functions, Range patterns
DotDotEq = { "..=" } // Inclusive Range, Range patterns
Comma = _{ "," } // Various separators
Semi = _{ ";" } // Terminator for various items and statements, Array types
Colon = _{ ":" } // Various separators
PathSep = _{ "::" } // Path separator
RArrow = _{ "->" } // Function return type, Closure return type, Function pointer type
FatArrow = { "=>" } // Match arms, Macros
Pound = { "#" } // Attributes
Dollar = { "$" } // Macros
Question = { "?" } // Question mark operator, Questionably sized, Macro Kleene Matcher
Tilde = { "~" } // The tilde operator has been unused since before Rust 1.0, but its token may still be used

Punctuation = {
    Plus
    | Minus
    | Star
    | Slash
    | Percent
    | Caret
    | Not
    | And
    | Or
    | AndAnd
    | OrOr
    | Shl
    | Shr
    | PlusEq
    | MinusEq
    | StarEq
    | SlashEq
    | PercentEq
    | CaretEq
    | AndEq
    | OrEq
    | ShlEq
    | ShrEq
    | Eq
    | EqEq
    | Ne
    | Gt
    | Lt
    | Ge
    | Le
    | At
    | Underscore
    | Dot
    | DotDot
    | DotDotDot
    | DotDotEq
    | Comma
    | Semi
    | Colon
    | PathSep
    | RArrow
    | FatArrow
    | Pound
    | Dollar
    | Question
    | Tilde
}

CurlyBracesOpen = { "{" }
CurlyBracesClose = { "}" }
SquareBracketsOpen = { "[" }
SquareBracketsClose = { "]" }
ParenthesesOpen = { "(" }
ParenthesesClose = { ")" }

Delimiters = {
    CurlyBracesOpen
    | CurlyBracesClose
    | SquareBracketsOpen
    | SquareBracketsClose
    | ParenthesesOpen
    | ParenthesesClose
}
/*
Tokens = {
    KW
    | Identifier
    | IdentifierList
    | Data
    | Punctuation
    | Delimiters
}*/