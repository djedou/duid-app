Module = _{ SOI ~ Statement* ~ EOI }

/// LITERALS

/// Comments
LineComment = _{ "//" ~ (!("\r" | "\n") ~ ANY)* ~ ("\n" | "\r\n" | "\r" | EOI) }
BlockComment = _{ "/*" ~ ((!("*/") ~ ANY) | BlockComment)* ~ "*/" }
Comment = @{ BlockComment | LineComment }

/// Block
// This allows {} and {statement; statement; statement;} and {statement; expr} and {expr}
BlockStart = { "{" }
BlockEnd = { "}" }
Block = _{ BlockStart ~ Statement* ~ Expr? ~ BlockEnd }

Semi = _{ ";" }
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
Visible = { "pub" }
Use = { "use" }
Mod = { "mod" }
AccessOp = { "." }
ParenOpen = { "(" }
ParenClose = { ")" }
Func = _{ "fn" }
Mut = { "mut" }

/// #### Identifier Literal #########
AlphaUp = _{ 'A'..'Z' }
Alpha = _{ 'a'..'z' | 'A'..'Z' }
Alphanumeric = _{ Alpha | '0'..'9' }
Identifier = @{ (Alpha | "_") ~ (Alphanumeric | "_")* }
IdentifierList = _{ Identifier ~ WHITESPACE? ~ ("," ~ WHITESPACE? ~ Identifier)* }


/// ### Paths Literal
PathSep = { "::" }
ModulePath = @{ Identifier ~ (PathSep ~ Identifier)* }

/// #### Digit Literals #######
Digit = { '0'..'9' }
HexDigit = { '0'..'9' | 'A'..'F' | 'a'..'f' }
OctDigit = { '0'..'7' }
BinDigit = { '0'..'1' }

/// #### Number Literals #######
BinInt = @{ "0" ~ ("b" | "B") ~ ("_"? ~ BinDigit)+ }
OctInt = @{ "0" ~ ("o" | "O") ~ ("_"? ~ OctDigit)+ }
HexInt = @{ "0" ~ ("x" | "X") ~ ("_"? ~ HexDigit)+ }
DecInt =  @{ Digit ~ (Digit | "_")* }

Byte = @{ "x" ~ HexDigit{2} }
Int = _{ BinInt | OctInt | HexInt | DecInt } // i32
Exp = { (^"e" | ^"E" ) ~ ("+" | "-")? ~ Int }
Float = @{ // default to f64
    "-"? ~ Int ~ "." ~ Int? ~ Exp? |
    "-"? ~ Int ~ Exp
}

/// #### Boolean Literals #######
True  = { "true" | "True" }
False = { "false" | "False" }
Bool = { True | False }

/// #### String Literals #######
UnicodeHex = { HexDigit{1, 6} }
Predefined = { "n" | "r" | "t" | "\\" | "0" | "\"" | "'" }
Unicode = { "u" ~ "{" ~ UnicodeHex ~ "}" }
Escape = { "\\" ~ (Predefined | Byte | Unicode) }
Char = { "'" ~ (Escape | ANY) ~ "'" }
StringContent = {(!("\\" | "\"") ~ ANY)+ }
RawStringInterior = {(!("\"" ~ PEEK) ~ ANY )*}
DoubleQuotedString = @{ "\"" ~ (StringContent | Escape)* ~ "\"" }
RawString = @{ "r" ~ PUSH("#"*) ~ "\"" ~ RawStringInterior ~ "\"" ~ POP }
BackquotedQuotedString  = @{ "`" ~ (!("`") ~ ANY)* ~ "`"}
String = @{
    RawString |
    BackquotedQuotedString |
    DoubleQuotedString 
}

Literals = {
    Byte
    | Float
    | Int
    | Bool
    | String
    | Char
}

Type = @{ AlphaUp ~ Identifier }
TypeDecl = @{ "type" ~ WHITESPACE ~ Type ~ Semi? }
CustomTypeDecl = { TypeDecl ~ "=" ~ "\n"? ~ (Type ~ StringContent ~ "|"? )+ }
AlliasTypeDecl = @{ ("type allias" ~ WHITESPACE) ~ Type ~ WHITESPACE ~ "=" ~ WHITESPACE ~ "{" ~ (StructElem ~ ",")* ~ StructElem? ~ "}" ~ Semi? }
StructElem = { Identifier ~ ":" ~ Type }



/// DECLARATION
ModDeclVisPub = @{ Visible? ~ WHITESPACE ~ Mod ~ WHITESPACE }
ModDeclVisPri = @{ Mod ~ WHITESPACE }
ModDeclVis = _{ ModDeclVisPub | ModDeclVisPri }
ModDecl = { ModDeclVis ~ ModulePath ~ Semi }

ModReExpVisPub = @{ Visible? ~ WHITESPACE ~ Use ~ WHITESPACE }
ModReExpVisPri = @{ Use ~ WHITESPACE }
ModReExpVis = _{ ModReExpVisPub | ModReExpVisPri }
ModReExp = @{ ModulePath ~ (PathSep ~ BlockStart ~ IdentifierList ~ BlockEnd)? ~ Semi }
ModReExpDecl = { ModReExpVis ~ ModReExp }

VarMut = @{ "let" ~ WHITESPACE ~ Mut ~ WHITESPACE }
varImmut = @{ "let" ~ WHITESPACE }
VarMutability = _{ VarMut | varImmut }
DeclareTypeOp = _{ ":" ~ WHITESPACE? ~ Type  ~ WHITESPACE? }
VariableDecl = { VarMutability ~ Identifier ~ WHITESPACE? ~ DeclareTypeOp? ~ ("." ~ WHITESPACE? ~ Expr)? ~ Semi}


/// Function
FieldAccess = { Identifier ~ AccessOp ~ Identifier ~ FuncParams? }
FuncParams = { ParenOpen ~ ((Expr | Identifier) ~ ",")* ~ (Expr | Identifier)? ~ ParenClose }
FuncArg = { Identifier ~ WHITESPACE? ~ ":" ~ WHITESPACE? ~ Type }
FuncArgs = { ParenOpen ~ (FuncArg ~ ",")* ~ FuncArg? ~ ParenClose }
FuncCall = { Identifier ~ FuncParams }
FuncReturnTy = { Type | Identifier }
FuncDefinition = { Identifier ~ FuncArgs ~ WHITESPACE? ~ "->" ~ WHITESPACE? ~ FuncReturnTy ~ Block }
FuncVisPub = @{ Visible? ~ WHITESPACE ~ Func ~ WHITESPACE }
FuncVisPri = @{ Func ~ WHITESPACE }
FuncVis = _{ FuncVisPub | FuncVisPri }
FuncDecl = { FuncVis ~ FuncDefinition }

/// #### Custom Types Declaration ####

Declaration = { 
    ModDecl
    | ModReExpDecl
    | AlliasTypeDecl
    | CustomTypeDecl
    | TypeDecl
    | FuncDecl
    | VariableDecl
}

/// VALUES
Value = _{ 
    ParenOpen ~ Expr ~ ParenClose
    | Literals
}

/// Expression
Expr = {
    Value
    | FuncCall
}

/// Statement
Statement = { 
    Declaration 
    | (Expr ~ Semi?) 
    | Comment 
}